// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

generator erd {
  provider = "prisma-erd-generator"
  output   = "../ERD.svg"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum UserRole {
  USER
  ADMIN
}

model User {
  id                String             @id @default(uuid())
  role              UserRole           @default(USER)
  email             String             @unique
  name              String?
  password          String
  govExamInstanceId String?
  GovExamInstance   GovExamInstance?   @relation(fields: [govExamInstanceId], references: [id])
  govExamId         String?
  GovExam           GovExam?           @relation(fields: [govExamId], references: [id])
  createdAt         DateTime           @default(now())
  updatedAt         DateTime           @updatedAt
  UserExams         UserExam[]
  Subscriptions     Subscription[]
  UserExamQuestion  UserExamQuestion[]
}

model Subscription {
  id        String   @id @default(uuid())
  userId    String
  User      User     @relation(fields: [userId], references: [id])
  govExamId String
  GovExam   GovExam  @relation(fields: [govExamId], references: [id])
  expiresAt DateTime
  price     Int
  currency  String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model GovExam {
  id            String            @id @default(uuid())
  name          String
  createdAt     DateTime          @default(now())
  updatedAt     DateTime          @updatedAt
  ExamInstances GovExamInstance[]
  UserExams     UserExam[]
  Subject       Subject[]
  Subscriptions Subscription[]
  Users         User[]
}

model GovExamInstance {
  id                String   @id @default(uuid())
  govExamId         String
  GovExam           GovExam  @relation(fields: [govExamId], references: [id])
  createdAt         DateTime @default(now())
  date              DateTime
  registrationOpen  DateTime
  registrationClose DateTime
  updatedAt         DateTime @updatedAt
  Users             User[]
}

model Subject {
  id               String     @id @default(uuid())
  name             String
  govExamId        String
  GovExam          GovExam    @relation(fields: [govExamId], references: [id])
  parentSubjectId  String?
  ParentSubject    Subject?   @relation(fields: [parentSubjectId], references: [id], name: "parentSubject")
  createdAt        DateTime   @default(now())
  updatedAt        DateTime   @updatedAt
  childrenSubjects Subject[]  @relation("parentSubject")
  Questions        Question[]
}

enum QuestionType {
  FREE_TEXT
  MCQ
  TRUE_FALSE
  MATCHING
  COMPLETION
}

enum QuestionStatus {
  DRAFT
  PUBLISHED
  ARCHIVED
}

model Question {
  id                String             @id @default(uuid())
  subjectId         String
  Subject           Subject            @relation(fields: [subjectId], references: [id])
  question          String
  imageUrl          String?
  explanation       String?
  status            QuestionStatus     @default(DRAFT)
  type              QuestionType
  createdAt         DateTime           @default(now())
  updatedAt         DateTime           @updatedAt
  Options           Options[]
  UserExamQuestions UserExamQuestion[]
}

model Options {
  id               String             @id @default(uuid())
  questionId       String
  Question         Question           @relation(fields: [questionId], references: [id])
  answer           String
  isCorrect        Boolean
  createdAt        DateTime           @default(now())
  updatedAt        DateTime           @updatedAt
  UserExamQuestion UserExamQuestion[]
}

model UserExam {
  id                String             @id @default(uuid())
  userId            String
  User              User               @relation(fields: [userId], references: [id])
  govExamId         String
  GovExam           GovExam            @relation(fields: [govExamId], references: [id])
  startedAt         DateTime?
  completedAt       DateTime?
  score             Float?
  createdAt         DateTime           @default(now())
  updatedAt         DateTime           @updatedAt
  UserExamQuestions UserExamQuestion[]
}

model UserExamQuestion {
  id             String    @id @default(uuid())
  userId         String
  User           User      @relation(fields: [userId], references: [id])
  userExamId     String?
  UserExam       UserExam? @relation(fields: [userExamId], references: [id])
  questionId     String
  Question       Question  @relation(fields: [questionId], references: [id])
  answer         String?
  chosenOptionId String?
  ChosenOption   Options?  @relation(fields: [chosenOptionId], references: [id], onDelete: NoAction)
  isCorrect      Boolean?
  createdAt      DateTime  @default(now())
  updatedAt      DateTime  @updatedAt
}
